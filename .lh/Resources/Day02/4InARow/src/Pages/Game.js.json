{
    "sourceFile": "Resources/Day02/4InARow/src/Pages/Game.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744993333648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744993474128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect } from 'react';\n import GameSettings from '../components/game/GameSettings';\n import GameBoard from '../components/game/GameBoard';\n-import GameAI, { findBestMove, makeMove, checkWinner } from '../components/gameAI';\n+import  { findBestMove, makeMove, checkWinner } from '../components/gameAI';\n \n export default function Game() {\n   const [gameStarted, setGameStarted] = useState(false);\n   const [board, setBoard] = useState(null);\n"
                },
                {
                    "date": 1744993549762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect } from 'react';\n-import GameSettings from '../components/game/GameSettings';\n-import GameBoard from '../components/game/GameBoard';\n+import GameSettings from '../components/GameSettings';\n+import GameBoard from '../components/GameBoard';\n import  { findBestMove, makeMove, checkWinner } from '../components/gameAI';\n \n export default function Game() {\n   const [gameStarted, setGameStarted] = useState(false);\n"
                }
            ],
            "date": 1744993333648,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport GameSettings from '../components/game/GameSettings';\nimport GameBoard from '../components/game/GameBoard';\nimport GameAI, { findBestMove, makeMove, checkWinner } from '../components/gameAI';\n\nexport default function Game() {\n  const [gameStarted, setGameStarted] = useState(false);\n  const [board, setBoard] = useState(null);\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winningCells, setWinningCells] = useState(null);\n  const [settings, setSettings] = useState(null);\n  const [isThinking, setIsThinking] = useState(false);\n  const [hintsLeft, setHintsLeft] = useState(0);\n  const [hintColumn, setHintColumn] = useState(null);\n\n  const initializeBoard = (rows, cols) => {\n    return Array(rows).fill().map(() => Array(cols).fill(0));\n  };\n\n  const handleStartGame = (gameSettings) => {\n    setSettings(gameSettings);\n    setBoard(initializeBoard(gameSettings.rows, gameSettings.cols));\n    setGameStarted(true);\n    setCurrentPlayer(1);\n    setGameOver(false);\n    setWinner(null);\n    setWinningCells(null);\n    setHintsLeft(gameSettings.hints);\n    setHintColumn(null);\n  };\n\n  const checkForTie = (board) => {\n    const isFullBoard = board[0].every(cell => cell !== 0);\n    if (isFullBoard) {\n      return true;\n    }\n    return false;\n  };\n\n  const handleHint = () => {\n    if (hintsLeft > 0 && currentPlayer === 1 && !gameOver) {\n      const { column } = findBestMove(board, settings.level, false, -Infinity, Infinity);\n      setHintColumn(column);\n      setHintsLeft(prev => prev - 1);\n    }\n  };\n\n  const handleCellClick = (col) => {\n    if (gameOver || currentPlayer !== 1) return;\n\n    setHintColumn(null);\n    const newBoard = makeMove(board, col, 1);\n    setBoard(newBoard);\n\n    const result = checkWinner(newBoard);\n    if (result) {\n      setGameOver(true);\n      setWinner(result.winner);\n      setWinningCells(result.winningCells);\n      return;\n    }\n\n    if (checkForTie(newBoard)) {\n      setGameOver(true);\n      setWinner(0);\n      return;\n    }\n\n    setCurrentPlayer(2);\n  };\n\n  useEffect(() => {\n    if (currentPlayer === 2 && !gameOver) {\n      setIsThinking(true);\n      setTimeout(() => {\n        const { column } = findBestMove(board, settings.level, true, -Infinity, Infinity);\n        const newBoard = makeMove(board, column, 2);\n        setBoard(newBoard);\n\n        const result = checkWinner(newBoard);\n        if (result) {\n          setGameOver(true);\n          setWinner(result.winner);\n          setWinningCells(result.winningCells);\n        } else if (checkForTie(newBoard)) {\n          setGameOver(true);\n          setWinner(0);\n        } else {\n          setCurrentPlayer(1);\n        }\n        setIsThinking(false);\n      }, 500);\n    }\n  }, [currentPlayer, board, settings?.level]);\n\n  if (!gameStarted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 py-12\">\n        <GameSettings onStartGame={handleStartGame} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 py-8\">\n      <GameBoard\n        board={board}\n        onCellClick={handleCellClick}\n        gameOver={gameOver}\n        winner={winner}\n        winningCells={winningCells}\n        onRestart={() => handleStartGame(settings)}\n        onNewGame={() => setGameStarted(false)}\n        currentPlayer={currentPlayer}\n        isThinking={isThinking}\n        hintsLeft={hintsLeft}\n        onHint={handleHint}\n        hintColumn={hintColumn}\n      />\n    </div>\n  );\n}"
        }
    ]
}