{
    "sourceFile": "Resources/Day02/4InARow/src/components/GameBoard.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744993419179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744993428891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import Cell from './Cell';\n import { Button } from \"@/components/ui/button\";\n import { RotateCcw, Trophy, MinusCircle, Lightbulb, PlusCircle } from \"lucide-react\";\n import { motion } from \"framer-motion\";\n-import { Badge } from \"@/components/ui/badge\";\n \n export default function GameBoard({ \n   board, \n   onCellClick, \n"
                },
                {
                    "date": 1745046598470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React from 'react';\n import Cell from './Cell';\n-import { Button } from \"@/components/ui/button\";\n+import { Button } from \"../components/ui/button\";\n import { RotateCcw, Trophy, MinusCircle, Lightbulb, PlusCircle } from \"lucide-react\";\n import { motion } from \"framer-motion\";\n \n export default function GameBoard({ \n"
                }
            ],
            "date": 1744993419179,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport Cell from './Cell';\nimport { Button } from \"@/components/ui/button\";\nimport { RotateCcw, Trophy, MinusCircle, Lightbulb, PlusCircle } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function GameBoard({ \n  board, \n  onCellClick, \n  gameOver, \n  winner,\n  winningCells,\n  onRestart,\n  onNewGame,\n  currentPlayer,\n  isThinking,\n  hintsLeft,\n  onHint,\n  hintColumn\n}) {\n  return (\n    <div className=\"max-w-3xl mx-auto p-4\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div className=\"flex items-center gap-4\">\n          {gameOver ? (\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              className={`inline-block px-4 py-2 rounded-full font-semibold ${\n                winner === 0 \n                  ? \"bg-blue-100 text-blue-800\" \n                  : \"bg-green-100 text-green-800\"\n              }`}\n            >\n              {winner === 0 ? (\n                <>\n                  <MinusCircle className=\"w-5 h-5 inline mr-2\" />\n                  It's a tie!\n                </>\n              ) : (\n                <>\n                  <Trophy className=\"w-5 h-5 inline mr-2\" />\n                  {winner === 1 ? \"You won!\" : \"AI won!\"}\n                </>\n              )}\n            </motion.div>\n          ) : (\n            <div className=\"text-lg font-medium text-gray-700\">\n              {isThinking ? \"AI is thinking...\" : \"Your turn\"}\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {!gameOver && currentPlayer === 1 && hintsLeft > 0 && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onHint}\n              className=\"gap-2\"\n              disabled={isThinking}\n            >\n              <Lightbulb className=\"w-4 h-4\" />\n              Hint ({hintsLeft})\n            </Button>\n          )}\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onNewGame}\n            className=\"gap-2\"\n          >\n            <PlusCircle className=\"w-4 h-4\" />\n            New Game\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"bg-white rounded-xl shadow-lg p-4\">\n        <div \n          className=\"grid gap-2\"\n          style={{ \n            gridTemplateColumns: `repeat(${board[0].length}, minmax(0, 1fr))` \n          }}\n        >\n          {board.map((row, i) =>\n            row.map((cell, j) => (\n              <Cell\n                key={`${i}-${j}`}\n                value={cell}\n                isValid={!gameOver && !isThinking && currentPlayer === 1 && !board[0][j]}\n                isWinning={winningCells?.some(([x, y]) => x === i && y === j)}\n                isHint={hintColumn === j}\n                onClick={() => onCellClick(j)}\n              />\n            ))\n          )}\n        </div>\n      </div>\n\n      {gameOver && (\n        <div className=\"text-center mt-6\">\n          <Button \n            onClick={onRestart}\n            variant=\"outline\"\n            className=\"gap-2\"\n          >\n            <RotateCcw className=\"w-4 h-4\" />\n            Play Again\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}"
        }
    ]
}